pipeline {
    agent any
    
    environment {
        SONAR_HOST_URL = 'http://172.16.3.130:13999' 
        SONAR_PROJECT_KEY = 'simple-ci-project'
        SONAR_PROJECT_NAME = 'Simple CI - PHP Project'
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                echo 'üì• ƒêang checkout code t·ª´ GitHub...'
                checkout scm
                
                // Hi·ªÉn th·ªã th√¥ng tin commit
                sh '''
                    echo "Branch: $(git rev-parse --abbrev-ref HEAD)"
                    echo "Commit: $(git rev-parse --short HEAD)"
                    echo "Author: $(git log -1 --pretty=format:'%an')"
                '''
            }
        }
        
        stage('Environment Info') {
            steps {
                echo 'üîç Ki·ªÉm tra m√¥i tr∆∞·ªùng...'
                sh '''
                    echo "=== PHP Version ==="
                    php --version || echo "PHP ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
                    
                    echo "\n=== Composer Version ==="
                    composer --version || echo "Composer ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
                    
                    echo "\n=== Node Version ==="
                    node --version || echo "Node.js ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
                    
                    echo "\n=== Directory Structure ==="
                    ls -la
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ C√†i ƒë·∫∑t dependencies...'
                script {
                    // C√†i ƒë·∫∑t PHP dependencies n·∫øu c√≥ composer.json
                    if (fileExists('composer.json')) {
                        sh '''
                            echo "C√†i ƒë·∫∑t PHP dependencies v·ªõi Composer..."
                            composer install --no-interaction --prefer-dist --optimize-autoloader
                        '''
                    } else {
                        echo "‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y composer.json, b·ªè qua b∆∞·ªõc c√†i ƒë·∫∑t PHP dependencies"
                    }
                    
                    // C√†i ƒë·∫∑t Node dependencies n·∫øu c√≥ package.json
                    if (fileExists('package.json')) {
                        sh '''
                            echo "C√†i ƒë·∫∑t Node.js dependencies..."
                            npm install
                        '''
                    } else {
                        echo "‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y package.json, b·ªè qua b∆∞·ªõc c√†i ƒë·∫∑t Node dependencies"
                    }
                }
            }
        }
        
        stage('Code Quality Check') {
            steps {
                echo '‚úÖ Ki·ªÉm tra ch·∫•t l∆∞·ª£ng code...'
                script {
                    // PHP CodeSniffer (n·∫øu c√≥ c√†i ƒë·∫∑t)
                    try {
                        sh '''
                            if command -v phpcs &> /dev/null; then
                                echo "Ch·∫°y PHP CodeSniffer..."
                                phpcs --standard=PSR12 --ignore=vendor,node_modules . || true
                            fi
                        '''
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è  PHP CodeSniffer kh√¥ng kh·∫£ d·ª•ng"
                    }
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                echo 'üîç B·∫Øt ƒë·∫ßu qu√©t code v·ªõi SonarQube...'
                
                script {
                    withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                        sh """
                            sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.projectName='${SONAR_PROJECT_NAME}' \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=\${SONAR_TOKEN} \
                            -Dsonar.sourceEncoding=UTF-8 \
                            -Dsonar.exclusions=**/vendor/**,**/node_modules/**,**/tests/**,**/database/**,**/*.min.js,**/*.min.css \
                            -Dsonar.php.coverage.reportPaths=coverage/coverage.xml \
                            -Dsonar.php.tests.reportPath=tests/report.xml
                        """
                    }
                }
                
                echo '‚úÖ SonarQube scan ho√†n t·∫•t!'
            }
        }
        
        stage('Quality Gate') {
            steps {
                echo 'üö¶ Ki·ªÉm tra Quality Gate t·ª´ SonarQube...'
                
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        try {
                            // ƒê·ª£i k·∫øt qu·∫£ t·ª´ SonarQube server
                            def qg = waitForQualityGate()
                            
                            if (qg.status != 'OK') {
                                echo "‚ùå Quality Gate Status: ${qg.status}"
                                error "Pipeline d·ª´ng l·∫°i do Quality Gate th·∫•t b·∫°i!"
                            } else {
                                echo "‚úÖ Quality Gate PASSED: ${qg.status}"
                            }
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è  Kh√¥ng th·ªÉ ki·ªÉm tra Quality Gate: ${e.message}"
                            echo "‚ö†Ô∏è  Ti·∫øp t·ª•c pipeline nh∆∞ng c·∫ßn ki·ªÉm tra th·ªß c√¥ng tr√™n SonarQube"
                            // Kh√¥ng d·ª´ng pipeline n·∫øu kh√¥ng check ƒë∆∞·ª£c Quality Gate
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image (Optional)') {
            when {
                expression { fileExists('Dockerfile') }
            }
            steps {
                echo 'üê≥ Build Docker image...'
                script {
                    sh '''
                        docker build -t simple-ci:${BUILD_NUMBER} .
                        docker tag simple-ci:${BUILD_NUMBER} simple-ci:latest
                        echo "‚úÖ Docker image built successfully"
                    '''
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'üîí Ki·ªÉm tra b·∫£o m·∫≠t...'
                script {
                    // Ki·ªÉm tra vulnerabilities folder
                    if (fileExists('vulnerabilities')) {
                        echo "‚ö†Ô∏è  Ph√°t hi·ªán th∆∞ m·ª•c vulnerabilities - c·∫ßn review"
                    }
                    
                    // C√≥ th·ªÉ th√™m c√°c c√¥ng c·ª• security scan kh√°c
                    echo "üí° Tip: C√≥ th·ªÉ t√≠ch h·ª£p th√™m OWASP Dependency Check, Snyk, v.v..."
                }
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ ========================================='
            echo '‚úÖ PIPELINE TH√ÄNH C√îNG!'
            echo '‚úÖ ========================================='
            echo "‚úÖ Build Number: ${BUILD_NUMBER}"
            echo "‚úÖ SonarQube Report: ${SONAR_HOST_URL}/dashboard?id=${SONAR_PROJECT_KEY}"
            
            // G·ª≠i notification n·∫øu c·∫ßn (email, Slack, etc.)
        }
        
        failure {
            echo '‚ùå ========================================='
            echo '‚ùå PIPELINE TH·∫§T B·∫†I!'
            echo '‚ùå ========================================='
            echo "‚ùå Build Number: ${BUILD_NUMBER}"
            echo "‚ùå Ki·ªÉm tra logs ƒë·ªÉ bi·∫øt chi ti·∫øt l·ªói"
            
            // G·ª≠i notification v·ªÅ l·ªói
        }
        
        unstable {
            echo '‚ö†Ô∏è  Pipeline kh√¥ng ·ªïn ƒë·ªãnh - c·∫ßn ki·ªÉm tra'
        }
        
        always {
            echo 'üßπ D·ªçn d·∫πp workspace...'
            
            // L∆∞u artifacts n·∫øu c·∫ßn
            script {
                try {
                    archiveArtifacts artifacts: '**/logs/*.log', allowEmptyArchive: true
                } catch (Exception e) {
                    echo "Kh√¥ng c√≥ artifacts ƒë·ªÉ l∆∞u"
                }
            }
            
            // Clean workspace (t√πy ch·ªçn)
            // cleanWs()
        }
    }
}